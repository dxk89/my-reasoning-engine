services:
  - type: web
    name: my-flask-app          # change to whatever you want your service to be called
    env: python
    plan: free                 # or starter, standard, etc.
    # Install Chrome in the build step and then install Python dependencies.
    buildCommand: |
      bash render-build.sh
      pip install -r requirements.txt
    # The start command locates the installed Chrome binary under
    # `.render/chrome` at runtime and exports it so that Selenium can
    # find it.  If no Chrome binary is found, the command exits with
    # a non‑zero status to make the failure obvious.  After setting
    # the environment variables, the FastAPI application is started
    # using uvicorn.  Adjust the module path (`app:app`) if your
    # application’s entry point differs.
    startCommand: |
      # Locate the Chrome binary installed during the build.  The
      # `find` command looks for a file named 'chrome' within the
      # `.render/chrome` directory.  If no binary is found, exit.
      CHROME_BIN="$(find /opt/render/project/.render/chrome -type f -name chrome | head -n 1)"
      if [ -z "$CHROME_BIN" ]; then
        echo "Chrome binary not found under .render/chrome" >&2
        exit 1
      fi
      export GOOGLE_CHROME_BIN="$CHROME_BIN"
      export PATH="$PATH:$(dirname "$CHROME_BIN")"
      # Start the app.  Replace 'app.server:app' with your actual
      # module path if different.
      uvicorn app.server:app --host 0.0.0.0 --port $PORT
    envVars:
      # Pin the Python version for reproducible builds.  Adjust as needed.
      - key: PYTHON_VERSION
        value: 3.11.9